// Created August 8th, 2023 - By: Devon Griffith A.K.A. rootPHAGE / 我爱数据
// Run on Windows [ gcc <path to file>\Botnet_Worm_Malware.cpp -o Botnet_Worm_Malware.exe
// <path to file>\Botnet_Worm_Malware.exe then run like any .exe ]

#include <iostream>
#include <vector>
#include <thread>
#include <chrono>
#include <cstdlib>
#include <fstream>
#include <cppcoro/process.hpp>

class PositiveWorm {
public:
    void spreadMessage(int systemID, const std::string& message) {
        spread(systemID, message);
    }

    void spread(int systemID, const std::string& message) {
        // Simulate message spreading to other systems
        std::cout << "System " << systemID << " spreading message: " << message << std::endl;
    }
};

class RemoteController {
public:
    void sendCommand(int systemID, const std::string& command) {
        executeCommand(systemID, command);
    }

    void executeCommand(int systemID, const std::string& command) {
        std::string outputFile = "system" + std::to_string(systemID) + "_output.txt";
        cppcoro::process::spawn(command, cppcoro::process::output(outputFile)).wait();
        std::ifstream file(outputFile);
        if (file.good()) {
            std::cout << "Command executed successfully on System " << systemID << "." << std::endl;
        } else {
            std::cout << "Error executing command on System " << systemID << "." << std::endl;
        }
    }
};

class RemoteExploiter {
public:
    void scanAndExploit(const std::string& system) {
        int result = performVulnerabilityScan(system);
        if (result == 0) {
            exploit(system);
        }
    }

private:
    int performVulnerabilityScan(const std::string& system) {
        // Simulate a vulnerability scan, return 0 if vulnerable, -1 if not
        std::cout << "Scanning system " << system << " for vulnerabilities..." << std::endl;
        // Return 0 to simulate a vulnerable system, -1 to simulate a secure system
        return (system == "192.168.1.5") ? 0 : -1;
    }

    void exploit(const std::string& system) {
        std::cout << "Exploiting vulnerabilities on system " << system << "..." << std::endl;
        std::cout << "Vulnerabilities successfully exploited on system " << system << "." << std::endl;
    }
};

class NetworkScanner {
public:
    std::vector<std::string> performPingSweep() {
        std::vector<std::string> vulnerableSystems;

        for (int i = 1; i <= 255; ++i) {
            std::string system = "192.168.1." + std::to_string(i);
            int result = cppcoro::process::spawn("ping", "-n", "1", system).wait(); // Windows: use -n, Linux: use -c
            if (result == 0) {
                std::cout << "Host " << system << " is reachable." << std::endl;

                RemoteExploiter exploiter;
                exploiter.scanAndExploit(system);

                if (exploiter.scanAndExploit(system) == 0) {
                    vulnerableSystems.push_back(system);
                }
            } else {
                std::cout << "Host " << system << " is not reachable." << std::endl;
            }
        }

        return vulnerableSystems;
    }
};

int main() {
    PositiveWorm worm;
    RemoteController controller;
    NetworkScanner scanner;

    // Positive Message Spreading
    for (int i = 1; i <= 3; ++i) {
        std::string message = "Hello from System " + std::to_string(i);
        worm.spreadMessage(i, message);
    }

    // Perform network scan and exploit vulnerabilities
    std::cout << "\nStarting network scan..." << std::endl;
    std::vector<std::string> vulnerableSystems = scanner.performPingSweep();

    // Spread to vulnerable systems
    std::string message = "I'm a non-harmful worm!";
    for (const std::string& system : vulnerableSystems) {
        worm.spread(0, message);
    }

    // Remote command execution on vulnerable systems
    std::string command = "echo Remote command executed!";
    for (const std::string& system : vulnerableSystems) {
        controller.sendCommand(0, command);
    }

    std::cout << "Network scan, spreading, and command execution completed." << std::endl;

    return 0;
}

// DO NOT USE THIS SCRIPT MALICIOUSLY - PROVIDED FOR EDUCATIONAL PURPOSES ONLY
